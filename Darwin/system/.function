# Mac OS only

## cat with SublimeText
function scat () {
	subl -w -s $1 &
}

# ``sdir'' with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function sdir() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

## SublimeText color folder diff
function smerdiff() {
	path1=`realpath $1`
	path2=`realpath $2`
	subl --command "sublimerge_diff {\"left\": \"$path1/\", \"right\": \"$path2/\"}"
}

## Functions for tesseract OCR MacOS screenshots
function OCR_ENG() {
	tesseract "$1" stdout | pbcopy
}

function OCR_RUS() {
	tesseract "$1" -l rus stdout | pbcopy
}

## iTerm2 tab color commands
## http://code.google.com/p/iterm2/wiki/ProprietaryEscapeCodes
if [[ -n "$ITERM_SESSION_ID" ]]; then
    tab-color() {
        echo -ne "\033]6;1;bg;red;brightness;$1\a"
        echo -ne "\033]6;1;bg;green;brightness;$2\a"
        echo -ne "\033]6;1;bg;blue;brightness;$3\a"
    }
    tab-red() { tab-color 255 0 0 }
    tab-green() { tab-color 0 255 0 }
    tab-blue() { tab-color 0 0 255 }
    tab-reset() { echo -ne "\033]6;1;bg;*;default\a" }

    function iterm2_tab_precmd() {
        tab-reset
    }

    function iterm2_tab_preexec() {
        if [[ "$1" =~ "^ssh " ]]; then
            if [[ "$1" =~ "prod" ]]; then
                tab-color 255 160 160
            else
                tab-color 160 255 160
            fi
        else
            tab-color 160 160 255
        fi
    }

    autoload -U add-zsh-hook
    add-zsh-hook precmd  iterm2_tab_precmd
    add-zsh-hook preexec iterm2_tab_preexec
fi

## Return my IP address
function myip() {
    ifconfig lo0 | grep 'inet '  | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
    ifconfig en0 | grep 'inet '  | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet '  | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

function pidport() {
    lsof -n -i4TCP:$1 | grep LISTEN
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

## Revert all Parallels VM's to last snapshots
function revert_all_parallels_machines() {
    for machine in $( prlctl list --all | while read line ; do echo ${line} | grep '{' | cut -d '{' -f 2 | cut -d '}' -f 1 ; done ); do
        for last_snapshot in $( prlctl snapshot-list ${machine} | grep '*' | sed 's/^.*[*]{//g' | sed 's/}.*//g' ); do
            prlctl snapshot-switch ${machine} -i ${last_snapshot} || {
                
                echo ''
                echo 'Something wrong with reverting the VM:'
                
                prlctl list ${machine}
                
                echo ''
                echo 'Check it out.'
                echo ''
            }
            
            # for debugging
            #echo "Last snapshot for ${machine} is  ${last_snapshot}."
        done
    done

    echo ''
    echo 'revert_all_parallels_machines: Done.'
    echo '' 
}

## Get OS X Software Updates, and update Homebrew, gem, msf, and cleanup installers
function update() {
    sudo softwareupdate -i -a;
    sudo -k
    brew update;
    brew upgrade;
    msfupdate;
    #vagrant plugin update vagrant-parallels;
    ~/Dropbox/projects/osx-postinstall/bin/git_install.sh --git_tools_dir $HOME/Dropbox/projects/osx-postinstall/data/tools/git-tools --update;
    upgrade_oh_my_zsh
    update_dotfiles

    echo ''
    echo 'update: Done.'
    echo ''
    #
    # todo: 
    # 	- docker images update
    #
}

## Like Linux locate
function locate_md () {
    mdfind "kMDItemDisplayName == $1"
}


## Open translators
translate () {
/usr/bin/osascript -e '
    tell application "Safari"
        tell window 1
            make new tab with properties {URL:"https://translate.google.com"}
            make new tab with properties {URL:"https://translate.yandex.ru"}
            make new tab with properties {URL:"https://www.translate.ru"}
            set current tab to (make new tab with properties {URL:"https://www.multitran.ru"})
            activate
        end tell
    end tell'
}